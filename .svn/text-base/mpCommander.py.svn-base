import sys
from PyQt5.QtCore import pyqtSlot
from PyQt5.QtWidgets import QWidget, QApplication, QHBoxLayout
from PyQt5.Qt import QTreeView, QVBoxLayout, QFrame, QFileSystemModel, QLabel,\
    QPushButton
from commands import addCommands
from functools import partial
from repl import Microterm
from treeModel import MicroPythonModel

class Window(QWidget):
    def __init__(self, *args, **kwargs):
        QWidget.__init__(self, *args, **kwargs)
        self.mp = Microterm("Com9:", 115200)
        self.mp.start()
        self._build()


    def done(self):
        self.mp.stop()
        
                
    def _onAction(self, sender):
        print("Action:", sender.key().toString())
        
        
    def _fileSystemModel(self):
        self.fsModel = QFileSystemModel()
        self.fsModel.setRootPath('d:/')
        return self.fsModel
    
    
    def _microPythonModel(self):
        self.mpModel = MicroPythonModel(self.mp.getFiles(recurse = True))
        return self.mpModel
    
    
    def _build(self):
        actions = addCommands(self)
        for action in actions:
            action.triggered.connect(partial(self._onAction, action))
            
        layout  = QVBoxLayout(self); self.setLayout(layout)
        panes   = QFrame(); layout.addWidget(panes); 
        cli     = QFrame(); layout.addWidget(cli)
        buttons = QFrame(); layout.addWidget(buttons)
        
        layout  = QHBoxLayout(panes)
        left    = QTreeView(); left.setModel(self._microPythonModel()); layout.addWidget(left)
        right   = QTreeView(); right.setModel(self._fileSystemModel()); layout.addWidget(right)

        layout  = QHBoxLayout(buttons)
        
        btnDefs = {1: "Help", 2: "Menu", 3: "View", 4: "Edit", 5: "Copy", 6: "RenMov", 7: "Mkdir", 8: "Delete", 9: "PullDn", 10: "Quit"}
        for i, s in btnDefs.items():
            l = QLabel(str(i), buttons); layout.addWidget(l)
            b = QPushButton(s, buttons); layout.addWidget(b)
            
        self.resize(1050, 800)

    
    @pyqtSlot()
    def on_open(self):
        print("Opening!")
        
if __name__ == '__main__':
    
    app = QApplication(sys.argv)
    win = Window()
    try:
        win.show()
        app.exec_()        
    finally:
        win.done()