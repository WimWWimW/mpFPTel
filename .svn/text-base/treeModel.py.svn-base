#!/usr/bin/env python


from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QApplication, QTreeView
from PyQt5.Qt import QAbstractTableModel, QFont, QAbstractItemModel, QModelIndex,\
    QKeySequence, QShortcut, pyqtSlot, QSortFilterProxyModel
from repl import Microterm
import serial
from PyQt5 import QtCore
import os
from functools import partial



class TreeItem(object):
    def __init__(self, data, parent=None):
        self.parent         = parent
        self.fileDescriptor = data
        self.children = []

    def appendChild(self, item):
        self.children.append(item)

    def child(self, row):
        return self.children[row]

    def childCount(self):
        return len(self.children)

    def row(self):
        if self.parent:
            return self.parent.children.index(self)
        return 0


    def key(self, column, direction):
        item = self.fileDescriptor
        prefix = "A" if (item.isDir == (direction == Qt.AscendingOrder)) else "Z"
        print(prefix, item.isDir, (direction == Qt.AscendingOrder))
        if column == 0:
            return  "%s %s" % (prefix, item.name)
         
        elif column == 1:
            return "%s %7d %s" % (prefix, item.size, item.name) 
            
        else:
            return "%s %s %s" % (prefix, item.type, item.name) 
        
        
        
class MicroPythonModel(QAbstractItemModel):
    
    def __init__(self, data, parent=None):
        super(MicroPythonModel, self).__init__(parent)

        self.rootItem = TreeItem("\\")
        self.setupModelData(data, self.rootItem)


    def columnCount(self, parent):
        return 3


    def data(self, index, role):
        if not index.isValid():
            return None

        item = index.internalPointer().fileDescriptor
        col  = index.column()  
        
        if role == Qt.DisplayRole:
            if col == 0:
                return item.name
            elif col == 1:
                return ("%6d" % item.size) if not item.isDir else ""
            elif col == 2:
                return item.type

        elif role == Qt.FontRole:
            if item.isDir:
                font = QFont()
                font.setItalic(True)
                return font
            
        elif role == Qt.TextAlignmentRole:
            if col == 1:
                return Qt.AlignRight
        return QtCore.QVariant()


    def flags(self, index):
        if not index.isValid():
            return Qt.NoItemFlags

        return Qt.ItemIsEnabled | Qt.ItemIsSelectable


    def headerData(self, section, orientation, role):
        if (role == Qt.DisplayRole) and (orientation == Qt.Horizontal):
            return ("Name Size Type Age".split()[section])
        return QtCore.QVariant()
#         if orientation == Qt.Horizontal and role == Qt.DisplayRole:
#             return self.rootItem.data(section)

        return None


    def index(self, row, column, parent):
        if not self.hasIndex(row, column, parent):
            return QModelIndex()

        if not parent.isValid():
            parentItem = self.rootItem
        else:
            parentItem = parent.internalPointer()

        childItem = parentItem.child(row)
        if childItem:
            return self.createIndex(row, column, childItem)
        else:
            return QModelIndex()


    def parent(self, index):
        if not index.isValid():
            return QModelIndex()

        item = index.internalPointer()

        if item.parent == self.rootItem:
            return QModelIndex()

        return self.createIndex(item.parent.row(), 0, item.parent)


    def rowCount(self, parent):
        if parent.column() > 0:
            return 0

        if not parent.isValid():
            parentItem = self.rootItem
        else:
            parentItem = parent.internalPointer()

        return parentItem.childCount()


    def setupModelData(self, files, parent):
        
        for f in files:
            node = TreeItem(f, parent)
            if f.hasChildren():
                self.setupModelData(f.children, node)
            parent.appendChild(node)



    def sort(self, column, order = Qt.AscendingOrder):
        if column == 0:
            keyFunc = lambda f: "%s %s" % ("A" if f.fileDescriptor.isDir else "Z", f.fileDescriptor.name) 
        elif column == 1:
            keyFunc = lambda f: "%7d %s" % (f.fileDescriptor.size + (1 if not f.fileDescriptor.isDir else 0), f.fileDescriptor.name) 
            
        else:
            keyFunc = lambda f: "%7d %s" % (f.fileDescriptor.size + 1000000 if f.fileDescriptor.isDir else 0, f.fileDescriptor.name) 
            
        keyFunc = partial(TreeItem.key, column = column, direction = order) # lambda f: f.key(column, order)
        self.rootItem.children = sorted(self.rootItem.children, key=keyFunc, reverse = (order != Qt.AscendingOrder))
        self.layoutChanged.emit()
        
        
if __name__ == '__main__':

    import sys
    @pyqtSlot()
    def on_open(sender):
        print("Opening!", sender.key().toString())

    app  = QApplication(sys.argv)
    repl = Microterm("Com9:", 115200)
    repl.start()
    try:
        model = MicroPythonModel(repl.getFiles(recurse = True))
        sorter = QSortFilterProxyModel(model)
        view = QTreeView()
        view.setModel(model)
        view.setSortingEnabled(True)
        view.setWindowTitle("Simple Tree Model")
        view.shortcut = QShortcut(QKeySequence("Ctrl+O"), view)
        view.shortcut.activated.connect(partial(on_open, view.shortcut))
        view.show()
        app.exec_()
    finally:
        repl.stop()



